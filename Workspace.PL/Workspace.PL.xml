<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Workspace.PL</name>
    </assembly>
    <members>
        <member name="M:Workspace.PL.Controllers.WorkspaceAdminController.CreateRoleAsync(Workspace.Entities.RoleRequest)">
            <summary>
            Создание роли в системе
            </summary>
            <param name="roleRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.Controllers.WorkspaceAdminController.UpdateRoleAsync(Workspace.Entities.RoleResponse)">
            <summary>
            Изменение названия роли в системе
            </summary>
            <param name="roleResponse"></param>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.Controllers.WorkspaceAdminController.DeleteRoleAsync(System.Int32)">
            <summary>
            Удаление роли из системы
            </summary>
            <remarks>
             Каскадное удаление роли, также удалит данную роль у всех пользователей системы и
             сопоставление "роль - разрешения"
            </remarks>
            <param name="id">Идентификатор роли</param>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.Controllers.WorkspaceAdminController.GetAllRolesAsync">
            <summary>
            Все роли существующие в системе
            </summary>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.Controllers.WorkspaceAdminController.CreatePermissionAsync(Workspace.Entities.WorkspacePermissionRequest)">
            <summary>
            Создание разрешения в системе 
            </summary>
            <remarks>
            Идентификатор разрешения должен совпадать с перечислением в enum Permission 
            </remarks>
            <param name="permissionRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.Controllers.WorkspaceAdminController.UpdatePermissionAsync(Workspace.Entities.WorkspacePermissionResponse)">
            <summary>
            Изменение названия разрешения
            </summary>
            <param name="permissionResponse"></param>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.Controllers.WorkspaceAdminController.DeletePermission(System.Int32)">
            <summary>
            Удаление разрешения 
            </summary>
            <remarks>
            Каскадное удаление разрешения. Также удалиться сопоставление "роли-разрешение"
            </remarks>
            <param name="id">Идентификатор разрешения</param>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.Controllers.WorkspaceAdminController.GetAllPermissionsAsync">
            <summary>
            Возвращает все разрешения в системе
            </summary>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.Controllers.WorkspaceAdminController.CreateRolePermissionAsync(Workspace.Entities.RolePermissionRequest)">
            <summary>
            Создание связи "роль - разрешение"
            </summary>
            <param name="rolePermissionRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.Controllers.WorkspaceAdminController.DeleteRolePermissionAsync(Workspace.Entities.RolePermissionRequest)">
            <summary>
            Удаление связи "роль - разрешение"
            </summary>
            <param name="rolePermissionRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.Controllers.WorkspaceAdminController.GetRolePermissionsAsync(System.Int32)">
            <summary>
            Отображаются все разрешения для роли
            </summary>
            <param name="id">Идентификатор роли</param>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.Controllers.WorkspaceInviteController.CreateAsync(Workspace.Entities.InviteRequest)">
            <summary>
            Создание приглашения
            </summary>
            <remarks>
            Пользователь, он же менеджер, который создал WorkspaceMart, выкладывает приглашение,
            чтобы другие пользователи системы могли поучаствовать в тасках по этому марту
            </remarks>
            <param name="inviteRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.Controllers.WorkspaceInviteController.GetAllInvitesAsync">
            <summary>
            Список приглашений для участия в тасках
            </summary>
            <remarks>
             Выводит список приглашений для пользователей, чтобы была возможность
             пользователю добавить себя в песочницу из который менеджер будет
             выбирать конкретных пользователей для добавления в таск
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.Controllers.WorkspaceInviteController.AcceptInvite(Workspace.Entities.InviteDetailRequest)">
            <summary>
            Принятие приглашения одним из пользователей
            </summary>
            <remarks>
            Если пользователь принимает приглашение, после этого менеджер может 
            его добавить в песочницу. Так как пользователь закрепляется в таске
            только из песочницы
            </remarks>
            <param name="inviteDetailRequest">
                "inviteID": приглашение на которое согласен пользователь,
                "userID": идентификатор пользователя ,
                "comments": комментарий, который может оставить пользователь
            </param>
            <returns></returns>
            <response code="200">Ответ на приглашение сохранено, менеджер 
            сможет добавить в песочницу данного пользователя</response>
        </member>
        <member name="M:Workspace.PL.Controllers.WorkspaceInviteController.GetAcceptedInvitesAsync(System.Guid)">
            <summary>
            Список пользователей которые приняли приглашение. 
            </summary>
            <remarks>
            Из данного списка менеджер будет добавлять пользователей в песочницу,
            из которой можно уже выбрать пользователей и закрепить за конкретным
            такско
            </remarks>
            <param name="martId">ИД марта, для которых хотим увидеть согласившихся юзеров</param>
            <returns> </returns>
        </member>
        <member name="T:Workspace.PL.Controllers.WorkspaceMartController">
            <summary>
            Контроллер работы с WorkspaceMart
            </summary>
            <param name="workspaceMartService"></param>
        </member>
        <member name="M:Workspace.PL.Controllers.WorkspaceMartController.#ctor(Workspace.BLL.Logic.IWorkspaceMartService,Microsoft.Extensions.Logging.ILogger{Workspace.PL.Controllers.WorkspaceMartController})">
            <summary>
            Контроллер работы с WorkspaceMart
            </summary>
            <param name="workspaceMartService"></param>
        </member>
        <member name="M:Workspace.PL.Controllers.WorkspaceMartController.CreateAsyncAsync(Workspace.Entities.WorkspaceMartRequest)">
             <summary>
             Создание WorkspaceMart
             </summary>
             <remarks>
             Пользователь создает WorkspaceMart в котором будут Таски и пользователи 
             закрепленные за тасками
             </remarks>
             <param name="workspaceMartRequest">
             "name": название WorkspaceMart,
            "ownerId": ИД пользователя, который создает 
             </param>
             <response code="200">Вернет JSON workspaceMartRequestе который содержит ИД созданного  WorkspaceMart</response>
        </member>
        <member name="M:Workspace.PL.Controllers.WorkspaceMartController.AddNewTaskAsync(System.Guid,Workspace.Entities.WorkspaceTaskShortRequest)">
            <summary>
            Добавление Таска связанного с WorkspaceMart
            </summary>
            <remarks>
            На данном этапе не может быть добавлен пользователь, так как пользователь может
            быть выбран из песочницы
            </remarks>
            <param name="id">ИД WorkspaceMart к которому привязываем задания</param>
            <param name="workspaceTaskRequest">
              "name": название нового Таска, 
              "status": согласно логике при создании Таска его статус равен Новый = 1
            </param>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.Controllers.WorkspaceSendbox.CreateAsync(Workspace.Entities.SendboxRequest)">
            <summary>
            Добавляем пользователя в песочницу
            </summary>
            <remarks>
            Добавляем пользователя в песочницу по конкретный март,
            чтобы из песочницы уже добавить к таску
            </remarks>
            <param name="sendboxRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.Controllers.WorkspaceSendbox.GetUsersAsync(System.Guid)">
            <summary>
            Возвращает пользователей отбранных из песочницы
            </summary>
            <remarks>
            Данные метод возвращает пользоваетелей из песочницы, которые могут
            быть закреплены за таском
            </remarks>
            <param name="martId"></param>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.WorkspaceNoteController.GetAsync">
            <summary>
            Запрос всех заметок
            </summary>
        </member>
        <member name="M:Workspace.PL.WorkspaceNoteController.GetAsync(System.Guid)">
            <summary>
            Запрос заметок по ID
            </summary>
        </member>
        <member name="M:Workspace.PL.WorkspaceNoteController.UpdateAsync(System.Guid,Workspace.Entities.WorkspaceNoteRequest)">
            <summary>
            Изменение заметки
            </summary>
        </member>
        <member name="M:Workspace.PL.WorkspaceNoteController.CreateAsync(System.Guid,Workspace.Entities.WorkspaceNoteRequest)">
            <summary>
            Создание заметки
            </summary>
        </member>
        <member name="M:Workspace.PL.WorkspaceNoteController.DeleteAsync(System.Guid)">
            <summary>
            Удаление заметки
            </summary>
        </member>
        <member name="M:Workspace.PL.WorkspaceTaskController.GetAsync">
            <summary>
            Запрос всех задач
            </summary>
        </member>
        <member name="M:Workspace.PL.WorkspaceTaskController.GetAsync(System.Guid)">
            <summary>
            Запрос задач по ID
            </summary>
        </member>
        <member name="M:Workspace.PL.WorkspaceTaskController.UpdateAsync(System.Guid,Workspace.Entities.WorkspaceTaskRequest)">
            <summary>
            Изменение задачи
            </summary>
        </member>
        <member name="M:Workspace.PL.WorkspaceTaskController.CreateAsync(Workspace.Entities.WorkspaceTaskRequest)">
            <summary>
            Создание задачи
            </summary>
        </member>
        <member name="M:Workspace.PL.WorkspaceTaskController.DeleteAsync(System.Guid)">
            <summary>
            Удаление задачи
            </summary>
        </member>
        <member name="M:Workspace.PL.WorkspaceTaskController.GetAllTasksForMartAsync(System.Guid)">
            <summary>
            Запрос задач по ид марта
            </summary>
            <remarks>
            Возвращает таски которые созданы для конкретного марта, при этом за тасками
            не закреплен еще исполнитель и статус таска "НОВЫЙ"
            </remarks>
            <param name="martId"></param>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.WorkspaceTaskController.SetEmployeeAsync(Workspace.Entities.WorkspaceTaskEmployee)">
            <summary>
            Назначение пользователя за таском
            </summary>
            <param name="workspaceTaskEmployee"></param>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.WorkspaceTaskController.UpdateStatus(Workspace.Entities.TaskUserRequest)">
            <summary>
            Изменяет статус задания
            </summary>
            <remarks>
            Изменяет статус задания в зависимости от контекста пользователя
            Менеджер или Сотрудник.
            </remarks>
            <param name="taskUserRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.WorkspaceUserController.LoginAsync(Workspace.Entities.Users.WorkspaceUserLogin)">
            <summary>
            Вход пользователя в систему
            </summary>
            <remarks>
            Пример по документации контроллеров
            </remarks>
            <param name="login">Логин пользователя</param>
            <param name="password">Пароль пользователя</param>
            <returns>Возваращает cookie с токеном</returns>
            <response code="200">Успешное выполнение</response>
            <response code="400">Ошибка API</response>
        </member>
        <member name="M:Workspace.PL.WorkspaceUserController.GetAsync">
            <summary>
            Запросить всех пользователей
            </summary>
        </member>
        <member name="M:Workspace.PL.WorkspaceUserController.GetAsync(System.Guid)">
            <summary>
            Запрос пользователя по ID
            </summary>
        </member>
        <member name="M:Workspace.PL.WorkspaceUserController.UpdateAsync(System.Guid,Workspace.Entities.WorkspaceUserRequest)">
            <summary>
            Изменение данных пользователя
            </summary>
        </member>
        <member name="M:Workspace.PL.WorkspaceUserController.CreateAsync(Workspace.Entities.WorkspaceUserRequest)">
            <summary>
            Создание пользователя
            </summary>
        </member>
        <member name="M:Workspace.PL.WorkspaceUserController.DeleteAsync(System.Guid)">
            <summary>
            Удаление пользователя
            </summary>
        </member>
        <member name="M:Workspace.PL.WorkspaceUserController.CreateRolePermissionAsync(Workspace.Entities.WorkspaceUserRoleRequest)">
            <summary>
            Назначение пользователю роли
            </summary>
            <param name="workspaceUserRoleRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.WorkspaceUserController.DeleteRolePermissionAsync(Workspace.Entities.WorkspaceUserRoleRequest)">
            <summary>
            Удаление роли у пользователя
            </summary>
            <param name="workspaceUserRoleRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Workspace.PL.WorkspaceUserController.GetUserRolesAsync(System.Guid)">
            <summary>
            Возвращает все роли назначенные пользователю
            </summary>
            <param name="id">Ид пользователя</param>
            <returns></returns>
        </member>
    </members>
</doc>
